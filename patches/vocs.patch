diff --git a/_lib/vite/plugins/cairo.json b/_lib/vite/plugins/cairo.json
new file mode 100644
index 0000000000000000000000000000000000000000..9078642c2c1dc8b472469c269619b1898734459c
--- /dev/null
+++ b/_lib/vite/plugins/cairo.json
@@ -0,0 +1,996 @@
+{
+  "credits": "Pulled from: https://raw.githubusercontent.com/starkware-libs/cairo/main/vscode-cairo/syntaxes/cairo.tmLanguage.json. This grammar is heavily modified Rust grammar from VSCode repository: https://github.com/microsoft/vscode/blob/11f415d4d77f7739c202905ccd02e27774146b75/extensions/rust/syntaxes/rust.tmLanguage.json",
+  "name": "Cairo",
+  "scopeName": "source.cairo",
+  "patterns": [
+    {
+      "comment": "boxed slice literal",
+      "begin": "(<)(\\[)",
+      "beginCaptures": {
+        "1": {
+          "name": "punctuation.brackets.angle.cairo"
+        },
+        "2": {
+          "name": "punctuation.brackets.square.cairo"
+        }
+      },
+      "end": ">",
+      "endCaptures": {
+        "0": {
+          "name": "punctuation.brackets.angle.cairo"
+        }
+      },
+      "patterns": [
+        {
+          "include": "#block-comments"
+        },
+        {
+          "include": "#comments"
+        },
+        {
+          "include": "#gtypes"
+        },
+        {
+          "include": "#lvariables"
+        },
+        {
+          "include": "#punctuation"
+        },
+        {
+          "include": "#types"
+        }
+      ]
+    },
+    {
+      "comment": "modules",
+      "match": "(mod)\\s+([a-z][A-Za-z0-9_]*)",
+      "captures": {
+        "1": {
+          "name": "storage.type.cairo"
+        },
+        "2": {
+          "name": "entity.name.module.cairo"
+        }
+      }
+    },
+    {
+      "comment": "use statements",
+      "name": "meta.use.cairo",
+      "begin": "\\b(use)\\s",
+      "beginCaptures": {
+        "1": {
+          "name": "keyword.other.cairo"
+        }
+      },
+      "end": ";",
+      "endCaptures": {
+        "0": {
+          "name": "punctuation.semi.cairo"
+        }
+      },
+      "patterns": [
+        {
+          "include": "#block-comments"
+        },
+        {
+          "include": "#comments"
+        },
+        {
+          "include": "#keywords"
+        },
+        {
+          "include": "#namespaces"
+        },
+        {
+          "include": "#punctuation"
+        },
+        {
+          "include": "#types"
+        },
+        {
+          "include": "#lvariables"
+        }
+      ]
+    },
+    {
+      "include": "#block-comments"
+    },
+    {
+      "include": "#comments"
+    },
+    {
+      "include": "#attributes"
+    },
+    {
+      "include": "#lvariables"
+    },
+    {
+      "include": "#constants"
+    },
+    {
+      "include": "#gtypes"
+    },
+    {
+      "include": "#functions"
+    },
+    {
+      "include": "#types"
+    },
+    {
+      "include": "#keywords"
+    },
+    {
+      "include": "#macros"
+    },
+    {
+      "include": "#namespaces"
+    },
+    {
+      "include": "#punctuation"
+    },
+    {
+      "include": "#strings"
+    },
+    {
+      "include": "#variables"
+    }
+  ],
+  "repository": {
+    "comments": {
+      "patterns": [
+        {
+          "comment": "documentation comments",
+          "name": "comment.line.documentation.cairo",
+          "match": "(///).*$",
+          "captures": {
+            "1": {
+              "name": "punctuation.definition.comment.cairo"
+            }
+          }
+        },
+        {
+          "comment": "line comments",
+          "name": "comment.line.double-slash.cairo",
+          "match": "(//).*$",
+          "captures": {
+            "1": {
+              "name": "punctuation.definition.comment.cairo"
+            }
+          }
+        }
+      ]
+    },
+    "block-comments": {
+      "patterns": [
+        {
+          "comment": "empty block comments",
+          "name": "comment.block.cairo",
+          "match": "/\\*\\*/"
+        },
+        {
+          "comment": "block documentation comments",
+          "name": "comment.block.documentation.cairo",
+          "begin": "/\\*\\*",
+          "end": "\\*/",
+          "patterns": [
+            {
+              "include": "#block-comments"
+            }
+          ]
+        },
+        {
+          "comment": "block comments",
+          "name": "comment.block.cairo",
+          "begin": "/\\*(?!\\*)",
+          "end": "\\*/",
+          "patterns": [
+            {
+              "include": "#block-comments"
+            }
+          ]
+        }
+      ]
+    },
+    "constants": {
+      "patterns": [
+        {
+          "comment": "ALL CAPS constants",
+          "name": "constant.other.caps.cairo",
+          "match": "\\b[A-Z]{2}[A-Z0-9_]*\\b"
+        },
+        {
+          "comment": "constant declarations",
+          "match": "\\b(const)\\s+([A-Z][A-Za-z0-9_]*)\\b",
+          "captures": {
+            "1": {
+              "name": "storage.type.cairo"
+            },
+            "2": {
+              "name": "constant.other.caps.cairo"
+            }
+          }
+        },
+        {
+          "comment": "decimal integers and floats",
+          "name": "constant.numeric.decimal.cairo",
+          "match": "\\b\\d[\\d_]*(\\.?)[\\d_]*(?:(E|e)([+-]?)([\\d_]+))?(f32|f64|i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
+          "captures": {
+            "1": {
+              "name": "punctuation.separator.dot.decimal.cairo"
+            },
+            "2": {
+              "name": "keyword.operator.exponent.cairo"
+            },
+            "3": {
+              "name": "keyword.operator.exponent.sign.cairo"
+            },
+            "4": {
+              "name": "constant.numeric.decimal.exponent.mantissa.cairo"
+            },
+            "5": {
+              "name": "entity.name.type.numeric.cairo"
+            }
+          }
+        },
+        {
+          "comment": "hexadecimal integers",
+          "name": "constant.numeric.hex.cairo",
+          "match": "\\b0x[\\da-fA-F_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
+          "captures": {
+            "1": {
+              "name": "entity.name.type.numeric.cairo"
+            }
+          }
+        },
+        {
+          "comment": "octal integers",
+          "name": "constant.numeric.oct.cairo",
+          "match": "\\b0o[0-7_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
+          "captures": {
+            "1": {
+              "name": "entity.name.type.numeric.cairo"
+            }
+          }
+        },
+        {
+          "comment": "binary integers",
+          "name": "constant.numeric.bin.cairo",
+          "match": "\\b0b[01_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
+          "captures": {
+            "1": {
+              "name": "entity.name.type.numeric.cairo"
+            }
+          }
+        },
+        {
+          "comment": "booleans",
+          "name": "constant.language.bool.cairo",
+          "match": "\\b(true|false)\\b"
+        }
+      ]
+    },
+    "escapes": {
+      "comment": "escapes: ASCII, byte, Unicode, quote, regex",
+      "name": "constant.character.escape.cairo",
+      "match": "(\\\\)(?:(?:(x[0-7][\\da-fA-F])|(u(\\{)[\\da-fA-F]{4,6}(\\}))|.))",
+      "captures": {
+        "1": {
+          "name": "constant.character.escape.backslash.cairo"
+        },
+        "2": {
+          "name": "constant.character.escape.bit.cairo"
+        },
+        "3": {
+          "name": "constant.character.escape.unicode.cairo"
+        },
+        "4": {
+          "name": "constant.character.escape.unicode.punctuation.cairo"
+        },
+        "5": {
+          "name": "constant.character.escape.unicode.punctuation.cairo"
+        }
+      }
+    },
+    "attributes": {
+      "comment": "attributes",
+      "name": "meta.attribute.cairo",
+      "begin": "(#)(\\!?)(\\[)",
+      "beginCaptures": {
+        "1": {
+          "name": "punctuation.definition.attribute.cairo"
+        },
+        "3": {
+          "name": "punctuation.brackets.attribute.cairo"
+        }
+      },
+      "end": "\\]",
+      "endCaptures": {
+        "0": {
+          "name": "punctuation.brackets.attribute.cairo"
+        }
+      },
+      "patterns": [
+        {
+          "include": "#block-comments"
+        },
+        {
+          "include": "#comments"
+        },
+        {
+          "include": "#keywords"
+        },
+        {
+          "include": "#punctuation"
+        },
+        {
+          "include": "#strings"
+        },
+        {
+          "include": "#gtypes"
+        },
+        {
+          "include": "#types"
+        }
+      ]
+    },
+    "functions": {
+      "patterns": [
+        {
+          "comment": "pub as a function",
+          "match": "\\b(pub)(\\()",
+          "captures": {
+            "1": {
+              "name": "keyword.other.cairo"
+            },
+            "2": {
+              "name": "punctuation.brackets.round.cairo"
+            }
+          }
+        },
+        {
+          "comment": "function definition",
+          "name": "meta.function.definition.cairo",
+          "begin": "\\b(fn)\\s+([A-Za-z0-9_]+)((\\()|(<))",
+          "beginCaptures": {
+            "1": {
+              "name": "keyword.other.fn.cairo"
+            },
+            "2": {
+              "name": "entity.name.function.cairo"
+            },
+            "4": {
+              "name": "punctuation.brackets.round.cairo"
+            },
+            "5": {
+              "name": "punctuation.brackets.angle.cairo"
+            }
+          },
+          "end": "\\{|;",
+          "endCaptures": {
+            "0": {
+              "name": "punctuation.brackets.curly.cairo"
+            }
+          },
+          "patterns": [
+            {
+              "include": "#block-comments"
+            },
+            {
+              "include": "#comments"
+            },
+            {
+              "include": "#keywords"
+            },
+            {
+              "include": "#lvariables"
+            },
+            {
+              "include": "#constants"
+            },
+            {
+              "include": "#gtypes"
+            },
+            {
+              "include": "#functions"
+            },
+            {
+              "include": "#macros"
+            },
+            {
+              "include": "#namespaces"
+            },
+            {
+              "include": "#punctuation"
+            },
+            {
+              "include": "#strings"
+            },
+            {
+              "include": "#types"
+            },
+            {
+              "include": "#variables"
+            }
+          ]
+        },
+        {
+          "comment": "function/method calls, chaining",
+          "name": "meta.function.call.cairo",
+          "begin": "([A-Za-z0-9_]+)(\\()",
+          "beginCaptures": {
+            "1": {
+              "name": "entity.name.function.cairo"
+            },
+            "2": {
+              "name": "punctuation.brackets.round.cairo"
+            }
+          },
+          "end": "\\)",
+          "endCaptures": {
+            "0": {
+              "name": "punctuation.brackets.round.cairo"
+            }
+          },
+          "patterns": [
+            {
+              "include": "#block-comments"
+            },
+            {
+              "include": "#comments"
+            },
+            {
+              "include": "#attributes"
+            },
+            {
+              "include": "#keywords"
+            },
+            {
+              "include": "#lvariables"
+            },
+            {
+              "include": "#constants"
+            },
+            {
+              "include": "#gtypes"
+            },
+            {
+              "include": "#functions"
+            },
+            {
+              "include": "#macros"
+            },
+            {
+              "include": "#namespaces"
+            },
+            {
+              "include": "#punctuation"
+            },
+            {
+              "include": "#strings"
+            },
+            {
+              "include": "#types"
+            },
+            {
+              "include": "#variables"
+            }
+          ]
+        },
+        {
+          "comment": "function/method calls with turbofish",
+          "name": "meta.function.call.cairo",
+          "begin": "([A-Za-z0-9_]+)(?=::<.*>\\()",
+          "beginCaptures": {
+            "1": {
+              "name": "entity.name.function.cairo"
+            }
+          },
+          "end": "\\)",
+          "endCaptures": {
+            "0": {
+              "name": "punctuation.brackets.round.cairo"
+            }
+          },
+          "patterns": [
+            {
+              "include": "#block-comments"
+            },
+            {
+              "include": "#comments"
+            },
+            {
+              "include": "#attributes"
+            },
+            {
+              "include": "#keywords"
+            },
+            {
+              "include": "#lvariables"
+            },
+            {
+              "include": "#constants"
+            },
+            {
+              "include": "#gtypes"
+            },
+            {
+              "include": "#functions"
+            },
+            {
+              "include": "#lifetimes"
+            },
+            {
+              "include": "#macros"
+            },
+            {
+              "include": "#namespaces"
+            },
+            {
+              "include": "#punctuation"
+            },
+            {
+              "include": "#strings"
+            },
+            {
+              "include": "#types"
+            },
+            {
+              "include": "#variables"
+            }
+          ]
+        }
+      ]
+    },
+    "keywords": {
+      "patterns": [
+        {
+          "comment": "control flow keywords",
+          "name": "keyword.control.cairo",
+          "match": "\\b(break|continue|do|else|for|if|loop|match|return|try|while|yield)\\b"
+        },
+        {
+          "comment": "storage keywords",
+          "name": "keyword.other.cairo storage.type.cairo",
+          "match": "\\b(extern|let|macro|mod)\\b"
+        },
+        {
+          "comment": "const keyword",
+          "name": "storage.modifier.cairo",
+          "match": "\\b(const)\\b"
+        },
+        {
+          "comment": "type keyword",
+          "name": "keyword.declaration.type.cairo storage.type.cairo",
+          "match": "\\b(type)\\b"
+        },
+        {
+          "comment": "enum keyword",
+          "name": "keyword.declaration.enum.cairo storage.type.cairo",
+          "match": "\\b(enum)\\b"
+        },
+        {
+          "comment": "trait keyword",
+          "name": "keyword.declaration.trait.cairo storage.type.cairo",
+          "match": "\\b(trait)\\b"
+        },
+        {
+          "comment": "struct keyword",
+          "name": "keyword.declaration.struct.cairo storage.type.cairo",
+          "match": "\\b(struct)\\b"
+        },
+        {
+          "comment": "storage modifiers",
+          "name": "storage.modifier.cairo",
+          "match": "\\b(ref|static)\\b"
+        },
+        {
+          "comment": "other keywords",
+          "name": "keyword.other.cairo",
+          "match": "\\b(as|dyn|move|impl|implicits|in|nopanic|of|priv|pub|static_assert|typeof|unsafe|use|where|with)\\b"
+        },
+        {
+          "comment": "fn",
+          "name": "keyword.other.fn.cairo",
+          "match": "\\bfn\\b"
+        },
+        {
+          "comment": "crate",
+          "name": "keyword.other.crate.cairo",
+          "match": "\\bcrate\\b"
+        },
+        {
+          "comment": "mut",
+          "name": "storage.modifier.mut.cairo",
+          "match": "\\bmut\\b"
+        },
+        {
+          "comment": "logical operators",
+          "name": "keyword.operator.logical.cairo",
+          "match": "(\\^|\\||\\|\\||&&|<<|>>|!)(?!=)"
+        },
+        {
+          "comment": "logical AND, borrow references",
+          "name": "keyword.operator.borrow.and.cairo",
+          "match": "&(?![&=])"
+        },
+        {
+          "comment": "assignment operators",
+          "name": "keyword.operator.assignment.cairo",
+          "match": "(\\+=|-=|\\*=|/=|%=|\\^=|&=|\\|=|<<=|>>=)"
+        },
+        {
+          "comment": "single equal",
+          "name": "keyword.operator.assignment.equal.cairo",
+          "match": "(?<![<>])=(?!=|>)"
+        },
+        {
+          "comment": "comparison operators",
+          "name": "keyword.operator.comparison.cairo",
+          "match": "(=(=)?(?!>)|!=|<=|(?<!=)>=)"
+        },
+        {
+          "comment": "math operators",
+          "name": "keyword.operator.math.cairo",
+          "match": "(([+%]|(\\*(?!\\w)))(?!=))|(-(?!>))|(/(?!/))"
+        },
+        {
+          "comment": "less than, greater than (special case)",
+          "match": "(?:\\b|(?:(\\))|(\\])|(\\})))[ \\t]+([<>])[ \\t]+(?:\\b|(?:(\\()|(\\[)|(\\{)))",
+          "captures": {
+            "1": {
+              "name": "punctuation.brackets.round.cairo"
+            },
+            "2": {
+              "name": "punctuation.brackets.square.cairo"
+            },
+            "3": {
+              "name": "punctuation.brackets.curly.cairo"
+            },
+            "4": {
+              "name": "keyword.operator.comparison.cairo"
+            },
+            "5": {
+              "name": "punctuation.brackets.round.cairo"
+            },
+            "6": {
+              "name": "punctuation.brackets.square.cairo"
+            },
+            "7": {
+              "name": "punctuation.brackets.curly.cairo"
+            }
+          }
+        },
+        {
+          "comment": "namespace operator",
+          "name": "keyword.operator.namespace.cairo",
+          "match": "::"
+        },
+        {
+          "comment": "desnap",
+          "match": "(\\*)(?=\\w+)",
+          "captures": {
+            "1": {
+              "name": "keyword.operator.desnap.cairo"
+            }
+          }
+        },
+        {
+          "comment": "snap",
+          "name": "keyword.operator.snap.cairo",
+          "match": "@"
+        },
+        {
+          "comment": "dot access",
+          "name": "keyword.operator.access.dot.cairo",
+          "match": "\\.(?!\\.)"
+        },
+        {
+          "comment": "ranges, range patterns",
+          "name": "keyword.operator.range.cairo",
+          "match": "\\.{2}(=|\\.)?"
+        },
+        {
+          "comment": "colon",
+          "name": "keyword.operator.key-value.cairo",
+          "match": ":(?!:)"
+        },
+        {
+          "comment": "dashrocket, skinny arrow",
+          "name": "keyword.operator.arrow.skinny.cairo",
+          "match": "->"
+        },
+        {
+          "comment": "hashrocket, fat arrow",
+          "name": "keyword.operator.arrow.fat.cairo",
+          "match": "=>"
+        },
+        {
+          "comment": "dollar macros",
+          "name": "keyword.operator.macro.dollar.cairo",
+          "match": "\\$"
+        },
+        {
+          "comment": "question mark operator, questionably sized, macro kleene matcher",
+          "name": "keyword.operator.question.cairo",
+          "match": "\\?"
+        }
+      ]
+    },
+    "interpolations": {
+      "comment": "curly brace interpolations",
+      "name": "meta.interpolation.cairo",
+      "match": "({)[^\"{}]*(})",
+      "captures": {
+        "1": {
+          "name": "punctuation.definition.interpolation.cairo"
+        },
+        "2": {
+          "name": "punctuation.definition.interpolation.cairo"
+        }
+      }
+    },
+    "macros": {
+      "patterns": [
+        {
+          "comment": "macros",
+          "name": "meta.macro.cairo",
+          "match": "(([a-z_][A-Za-z0-9_]*!)|([A-Z_][A-Za-z0-9_]*!))",
+          "captures": {
+            "2": {
+              "name": "entity.name.function.macro.cairo"
+            },
+            "3": {
+              "name": "entity.name.type.macro.cairo"
+            }
+          }
+        }
+      ]
+    },
+    "namespaces": {
+      "patterns": [
+        {
+          "comment": "namespace (non-type, non-function path segment)",
+          "match": "(?<![A-Za-z0-9_])([A-Za-z0-9_]+)((?<!super)::)",
+          "captures": {
+            "1": {
+              "name": "entity.name.namespace.cairo"
+            },
+            "2": {
+              "name": "keyword.operator.namespace.cairo"
+            }
+          }
+        }
+      ]
+    },
+    "types": {
+      "patterns": [
+        {
+          "comment": "numeric types",
+          "match": "(?<![A-Za-z])(felt252|i8|i16|i32|i64|i128|u8|u16|u32|u64|u128|u256|u512)\\b",
+          "captures": {
+            "1": {
+              "name": "entity.name.type.numeric.cairo"
+            }
+          }
+        },
+        {
+          "comment": "parameterized types",
+          "begin": "\\b(_?[A-Z][A-Za-z0-9_]*)(<)",
+          "beginCaptures": {
+            "1": {
+              "name": "entity.name.type.cairo"
+            },
+            "2": {
+              "name": "punctuation.brackets.angle.cairo"
+            }
+          },
+          "end": ">",
+          "endCaptures": {
+            "0": {
+              "name": "punctuation.brackets.angle.cairo"
+            }
+          },
+          "patterns": [
+            {
+              "include": "#block-comments"
+            },
+            {
+              "include": "#comments"
+            },
+            {
+              "include": "#keywords"
+            },
+            {
+              "include": "#lvariables"
+            },
+            {
+              "include": "#punctuation"
+            },
+            {
+              "include": "#types"
+            },
+            {
+              "include": "#variables"
+            }
+          ]
+        },
+        {
+          "comment": "primitive types",
+          "name": "entity.name.type.primitive.cairo",
+          "match": "\\b(bool|never)\\b"
+        },
+        {
+          "comment": "trait declarations",
+          "match": "\\b(trait)\\s+(_?[A-Z][A-Za-z0-9_]*)\\b",
+          "captures": {
+            "1": {
+              "name": "keyword.declaration.trait.cairo storage.type.cairo"
+            },
+            "2": {
+              "name": "entity.name.type.trait.cairo"
+            }
+          }
+        },
+        {
+          "comment": "struct declarations",
+          "match": "\\b(struct)\\s+(_?[A-Z][A-Za-z0-9_]*)\\b",
+          "captures": {
+            "1": {
+              "name": "keyword.declaration.struct.cairo storage.type.cairo"
+            },
+            "2": {
+              "name": "entity.name.type.struct.cairo"
+            }
+          }
+        },
+        {
+          "comment": "enum declarations",
+          "match": "\\b(enum)\\s+(_?[A-Z][A-Za-z0-9_]*)\\b",
+          "captures": {
+            "1": {
+              "name": "keyword.declaration.enum.cairo storage.type.cairo"
+            },
+            "2": {
+              "name": "entity.name.type.enum.cairo"
+            }
+          }
+        },
+        {
+          "comment": "type declarations",
+          "match": "\\b(type)\\s+(_?[A-Z][A-Za-z0-9_]*)\\b",
+          "captures": {
+            "1": {
+              "name": "keyword.declaration.type.cairo storage.type.cairo"
+            },
+            "2": {
+              "name": "entity.name.type.declaration.cairo"
+            }
+          }
+        },
+        {
+          "comment": "types",
+          "name": "entity.name.type.cairo",
+          "match": "\\b_?[A-Z][A-Za-z0-9_]*\\b(?!!)"
+        }
+      ]
+    },
+    "gtypes": {
+      "patterns": [
+        {
+          "comment": "option types",
+          "name": "entity.name.type.option.cairo",
+          "match": "\\b(Some|None)\\b"
+        },
+        {
+          "comment": "result types",
+          "name": "entity.name.type.result.cairo",
+          "match": "\\b(Ok|Err)\\b"
+        }
+      ]
+    },
+    "punctuation": {
+      "patterns": [
+        {
+          "comment": "comma",
+          "name": "punctuation.comma.cairo",
+          "match": ","
+        },
+        {
+          "comment": "curly braces",
+          "name": "punctuation.brackets.curly.cairo",
+          "match": "[{}]"
+        },
+        {
+          "comment": "parentheses, round brackets",
+          "name": "punctuation.brackets.round.cairo",
+          "match": "[()]"
+        },
+        {
+          "comment": "semicolon",
+          "name": "punctuation.semi.cairo",
+          "match": ";"
+        },
+        {
+          "comment": "square brackets",
+          "name": "punctuation.brackets.square.cairo",
+          "match": "[\\[\\]]"
+        },
+        {
+          "comment": "angle brackets",
+          "name": "punctuation.brackets.angle.cairo",
+          "match": "(?<!=)[<>]"
+        }
+      ]
+    },
+    "strings": {
+      "patterns": [
+        {
+          "comment": "double-quoted byte array strings",
+          "name": "string.quoted.double.cairo",
+          "begin": "(\")",
+          "beginCaptures": {
+            "1": {
+              "name": "punctuation.definition.string.bytearray.cairo"
+            }
+          },
+          "end": "\"",
+          "endCaptures": {
+            "0": {
+              "name": "punctuation.definition.string.bytearray.cairo"
+            }
+          },
+          "patterns": [
+            {
+              "include": "#escapes"
+            },
+            {
+              "include": "#interpolations"
+            }
+          ]
+        },
+        {
+          "comment": "single-quoted short strings",
+          "name": "string.quoted.single.cairo",
+          "begin": "(')",
+          "beginCaptures": {
+            "1": {
+              "name": "punctuation.definition.string.short.cairo"
+            }
+          },
+          "end": "'",
+          "endCaptures": {
+            "0": {
+              "name": "punctuation.definition.string.short.cairo"
+            }
+          },
+          "patterns": [
+            {
+              "include": "#escapes"
+            },
+            {
+              "include": "#interpolations"
+            }
+          ]
+        }
+      ]
+    },
+    "lvariables": {
+      "patterns": [
+        {
+          "comment": "super",
+          "name": "variable.language.super.cairo",
+          "match": "\\bsuper\\b"
+        }
+      ]
+    },
+    "variables": {
+      "patterns": [
+        {
+          "comment": "variables",
+          "name": "variable.other.cairo",
+          "match": "\\b(?<!(?<!\\.)\\.)[a-z0-9_]+\\b"
+        }
+      ]
+    }
+  }
+}
diff --git a/_lib/vite/plugins/mdx.js b/_lib/vite/plugins/mdx.js
index 09d02d1576a72dc43dffd76803f4a16054ebbe18..b2a2769561f95e2966ded2810df3fbb842155081 100644
--- a/_lib/vite/plugins/mdx.js
+++ b/_lib/vite/plugins/mdx.js
@@ -1,136 +1,180 @@
-import mdxPlugin from '@mdx-js/rollup';
-import rehypeShiki, {} from '@shikijs/rehype';
-import { transformerNotationDiff, transformerNotationFocus, transformerNotationHighlight, transformerNotationWordHighlight, } from '@shikijs/transformers';
-import { defaultTwoslashOptions as defaultTwoslashOptions_, transformerTwoslash, } from '@shikijs/twoslash';
-import { h } from 'hastscript';
-import rehypeAutolinkHeadings from 'rehype-autolink-headings';
-import rehypeSlug from 'rehype-slug';
-import remarkDirective from 'remark-directive';
-import remarkFrontmatter from 'remark-frontmatter';
-import remarkGfm from 'remark-gfm';
-import remarkMdxFrontmatter from 'remark-mdx-frontmatter';
-import {} from 'vite';
-import { resolveVocsConfig } from '../utils/resolveVocsConfig.js';
-import { rehypeShikiDisplayNotation } from './rehype/display-shiki-notation.js';
-import { rehypeInlineShiki } from './rehype/inline-shiki.js';
-import { remarkAuthors } from './remark/authors.js';
-import { remarkBlogPosts } from './remark/blog-posts.js';
-import { remarkCallout } from './remark/callout.js';
-import { remarkCodeGroup } from './remark/code-group.js';
-import { remarkCode } from './remark/code.js';
-import { remarkDetails } from './remark/details.js';
-import { remarkFilename } from './remark/filename.js';
-import { remarkInferFrontmatter } from './remark/inferred-frontmatter.js';
-import { remarkLinks } from './remark/links.js';
-import { remarkSponsors } from './remark/sponsors.js';
-import { remarkSteps } from './remark/steps.js';
-import { remarkStrongBlock } from './remark/strong-block.js';
-import { remarkSubheading } from './remark/subheading.js';
-import { remarkTwoslash } from './remark/twoslash.js';
-import { transformerEmptyLine } from './shiki/transformerEmptyLine.js';
-import { transformerLineNumbers } from './shiki/transformerLineNumbers.js';
-import { transformerNotationInclude } from './shiki/transformerNotationInclude.js';
-import { transformerSplitIdentifiers } from './shiki/transformerSplitIdentifiers.js';
-import { transformerTagLine } from './shiki/transformerTagLine.js';
-import { transformerTitle } from './shiki/transformerTitle.js';
-import { twoslashRenderer } from './shiki/twoslashRenderer.js';
-import { twoslasher } from './shiki/twoslasher.js';
+import mdxPlugin from "@mdx-js/rollup";
+import {
+  transformerNotationDiff,
+  transformerNotationFocus,
+  transformerNotationHighlight,
+  transformerNotationWordHighlight,
+} from "@shikijs/transformers";
+import {
+  defaultTwoslashOptions as defaultTwoslashOptions_,
+  transformerTwoslash,
+} from "@shikijs/twoslash";
+import { h } from "hastscript";
+import rehypeAutolinkHeadings from "rehype-autolink-headings";
+import rehypeSlug from "rehype-slug";
+import remarkDirective from "remark-directive";
+import remarkFrontmatter from "remark-frontmatter";
+import remarkGfm from "remark-gfm";
+import remarkMdxFrontmatter from "remark-mdx-frontmatter";
+import {} from "vite";
+import { resolveVocsConfig } from "../utils/resolveVocsConfig.js";
+import { rehypeShikiDisplayNotation } from "./rehype/display-shiki-notation.js";
+import { rehypeInlineShiki } from "./rehype/inline-shiki.js";
+import { remarkAuthors } from "./remark/authors.js";
+import { remarkBlogPosts } from "./remark/blog-posts.js";
+import { remarkCallout } from "./remark/callout.js";
+import { remarkCodeGroup } from "./remark/code-group.js";
+import { remarkCode } from "./remark/code.js";
+import { remarkDetails } from "./remark/details.js";
+import { remarkFilename } from "./remark/filename.js";
+import { remarkInferFrontmatter } from "./remark/inferred-frontmatter.js";
+import { remarkLinks } from "./remark/links.js";
+import { remarkSponsors } from "./remark/sponsors.js";
+import { remarkSteps } from "./remark/steps.js";
+import { remarkStrongBlock } from "./remark/strong-block.js";
+import { remarkSubheading } from "./remark/subheading.js";
+import { remarkTwoslash } from "./remark/twoslash.js";
+import { transformerEmptyLine } from "./shiki/transformerEmptyLine.js";
+import { transformerLineNumbers } from "./shiki/transformerLineNumbers.js";
+import { transformerNotationInclude } from "./shiki/transformerNotationInclude.js";
+import { transformerSplitIdentifiers } from "./shiki/transformerSplitIdentifiers.js";
+import { transformerTagLine } from "./shiki/transformerTagLine.js";
+import { transformerTitle } from "./shiki/transformerTitle.js";
+import { twoslashRenderer } from "./shiki/twoslashRenderer.js";
+import { twoslasher } from "./shiki/twoslasher.js";
+
+// Patch
+import rehypeShikiFromHighlighter from "@shikijs/rehype/core";
+import { createHighlighterCore } from "shiki/core";
+import * as cairo from "./cairo.json" with { type: "json" };
+const langs = [
+  cairo,
+  import("shiki/langs/solidity.mjs"),
+  import("shiki/langs/rust.mjs"),
+  import("shiki/langs/markdown.mjs"),
+  import("shiki/langs/json.mjs"),
+  import("shiki/langs/bash.mjs"),
+  import("shiki/langs/shell.mjs"),
+  import("shiki/langs/javascript.mjs"),
+  import("shiki/langs/typescript.mjs"),
+]
+const highlighter = await createHighlighterCore({
+  themes: [
+    import("shiki/themes/github-dark-dimmed.mjs"),
+    import("shiki/themes/github-light.mjs"),
+  ],
+  langs,
+  langAlias: {
+    'cairo': 'Cairo'
+  },
+  loadWasm: import("shiki/wasm"),
+});
+// Patch end
+
 const defaultTwoslashOptions = defaultTwoslashOptions_();
 export const getRemarkPlugins = ({ markdown } = {}) => [
-    remarkDirective,
-    remarkInferFrontmatter,
-    remarkFrontmatter,
-    remarkMdxFrontmatter,
-    remarkGfm,
-    remarkLinks,
-    remarkBlogPosts,
-    remarkCallout,
-    remarkCode,
-    remarkCodeGroup,
-    remarkDetails,
-    remarkFilename,
-    remarkSponsors,
-    remarkSteps,
-    remarkStrongBlock,
-    remarkSubheading,
-    remarkTwoslash,
-    remarkAuthors,
-    ...(markdown?.remarkPlugins || []),
+  remarkDirective,
+  remarkInferFrontmatter,
+  remarkFrontmatter,
+  remarkMdxFrontmatter,
+  remarkGfm,
+  remarkLinks,
+  remarkBlogPosts,
+  remarkCallout,
+  remarkCode,
+  remarkCodeGroup,
+  remarkDetails,
+  remarkFilename,
+  remarkSponsors,
+  remarkSteps,
+  remarkStrongBlock,
+  remarkSubheading,
+  remarkTwoslash,
+  remarkAuthors,
+  ...(markdown?.remarkPlugins || []),
 ];
 const defaultThemes = {
-    dark: 'github-dark-dimmed',
-    light: 'github-light',
+  dark: "github-dark-dimmed",
+  light: "github-light",
 };
-export const getRehypePlugins = ({ markdown, rootDir = '', twoslash = {}, } = {}) => [
-    rehypeSlug,
-    [
-        rehypeShiki,
-        {
-            transformers: [
-                transformerLineNumbers(),
-                transformerNotationDiff(),
-                transformerNotationFocus(),
-                transformerNotationHighlight(),
-                transformerNotationWordHighlight(),
-                transformerNotationInclude({ rootDir }),
-                transformerEmptyLine(),
-                transformerTagLine(),
-                transformerTitle(),
-                twoslash !== false
-                    ? transformerTwoslash({
-                        explicitTrigger: true,
-                        renderer: twoslashRenderer(),
-                        twoslasher,
-                        twoslashOptions: {
-                            ...twoslash,
-                            customTags: [
-                                'allowErrors',
-                                ...(defaultTwoslashOptions.customTags ?? []),
-                                ...(twoslash.customTags ?? []),
-                            ],
-                            compilerOptions: {
-                                ...(twoslash.compilerOptions ?? {}),
-                                ...defaultTwoslashOptions.compilerOptions,
-                            },
-                        },
-                    })
-                    : null,
-                transformerSplitIdentifiers(),
-            ].filter(Boolean),
-            themes: defaultThemes,
-            ...markdown?.code,
-        },
-    ],
-    [
-        rehypeInlineShiki,
-        {
-            themes: defaultThemes,
-            ...markdown?.code,
-        },
-    ],
-    rehypeShikiDisplayNotation,
-    [
-        rehypeAutolinkHeadings,
-        {
-            behavior: 'append',
-            content() {
-                return [h('div', { dataAutolinkIcon: true })];
-            },
-        },
-    ],
-    ...(markdown?.rehypePlugins || []),
+export const getRehypePlugins = ({
+  markdown,
+  rootDir = "",
+  twoslash = {},
+} = {}) => [
+  rehypeSlug,
+  [
+    // Patch
+    rehypeShikiFromHighlighter,
+    highlighter,
+    // Patch end
+    {
+      transformers: [
+        transformerLineNumbers(),
+        transformerNotationDiff(),
+        transformerNotationFocus(),
+        transformerNotationHighlight(),
+        transformerNotationWordHighlight(),
+        transformerNotationInclude({ rootDir }),
+        transformerEmptyLine(),
+        transformerTagLine(),
+        transformerTitle(),
+        twoslash !== false
+          ? transformerTwoslash({
+              explicitTrigger: true,
+              renderer: twoslashRenderer(),
+              twoslasher,
+              twoslashOptions: {
+                ...twoslash,
+                customTags: [
+                  "allowErrors",
+                  ...(defaultTwoslashOptions.customTags ?? []),
+                  ...(twoslash.customTags ?? []),
+                ],
+                compilerOptions: {
+                  ...(twoslash.compilerOptions ?? {}),
+                  ...defaultTwoslashOptions.compilerOptions,
+                },
+              },
+            })
+          : null,
+        transformerSplitIdentifiers(),
+      ].filter(Boolean),
+      themes: defaultThemes,
+      ...markdown?.code,
+    },
+  ],
+  [
+    rehypeInlineShiki,
+    {
+      langs,
+      themes: defaultThemes,
+      ...markdown?.code,
+    },
+  ],
+  rehypeShikiDisplayNotation,
+  [
+    rehypeAutolinkHeadings,
+    {
+      behavior: "append",
+      content() {
+        return [h("div", { dataAutolinkIcon: true })];
+      },
+    },
+  ],
+  ...(markdown?.rehypePlugins || []),
 ];
 export async function mdx() {
-    const { config } = await resolveVocsConfig();
-    const { markdown, rootDir, twoslash } = config;
-    const remarkPlugins = getRemarkPlugins({ markdown });
-    const rehypePlugins = getRehypePlugins({ markdown, rootDir, twoslash });
-    return [
-        mdxPlugin({
-            providerImportSource: 'vocs/mdx-react',
-            remarkPlugins,
-            rehypePlugins,
-        }),
-    ];
+  const { config } = await resolveVocsConfig();
+  const { markdown, rootDir, twoslash } = config;
+  const remarkPlugins = getRemarkPlugins({ markdown });
+  const rehypePlugins = getRehypePlugins({ markdown, rootDir, twoslash });
+  return [
+    mdxPlugin({
+      providerImportSource: "vocs/mdx-react",
+      remarkPlugins,
+      rehypePlugins,
+    }),
+  ];
 }
 //# sourceMappingURL=mdx.js.map
diff --git a/_lib/vite/plugins/rehype/inline-shiki.js b/_lib/vite/plugins/rehype/inline-shiki.js
index 1e2a7426a5a80afa1bdff24388a8849b49e04f2e..20332be7836e5ca932f59747c3de697430b1d711 100644
--- a/_lib/vite/plugins/rehype/inline-shiki.js
+++ b/_lib/vite/plugins/rehype/inline-shiki.js
@@ -1,30 +1,51 @@
-import { bundledLanguages, getSingletonHighlighter } from 'shiki';
-import { visit } from 'unist-util-visit';
+import { bundledLanguages, getSingletonHighlighter } from "shiki";
+import { visit } from "unist-util-visit";
 const inlineShikiRegex = /(.*){:(.*)}$/;
 let promise;
 export const rehypeInlineShiki = function (options = {}) {
-    const themeNames = ('themes' in options ? Object.values(options.themes) : [options.theme]).filter(Boolean);
-    const langs = options.langs || Object.keys(bundledLanguages);
-    return async function (tree) {
-        if (!promise)
-            promise = getSingletonHighlighter({
-                themes: themeNames,
-                langs,
-            });
-        const highlighter = await promise;
-        return visit(tree, 'element', (node, index, parent) => {
-            if (node.tagName !== 'code')
-                return;
-            const match = node.children[0]?.value?.match(inlineShikiRegex);
-            if (!match)
-                return;
-            const [, code, lang] = match;
-            const hast = highlighter.codeToHast(code, { ...options, lang });
-            const inlineCode = hast.children[0].children[0];
-            if (!inlineCode)
-                return;
-            parent?.children.splice(index ?? 0, 1, inlineCode);
+  const themeNames = (
+    "themes" in options ? Object.values(options.themes) : [options.theme]
+  ).filter(Boolean);
+  const langs = options.langs || Object.keys(bundledLanguages);
+  return async function (tree) {
+    if (!promise)
+      promise = getSingletonHighlighter({
+        themes: themeNames,
+        langs,
+      });
+    const highlighter = await promise;
+    return visit(tree, "element", (node, index, parent) => {
+      if (node.tagName !== "code") return;
+      // ignore math
+      const classes = Array.isArray(node.properties.className)
+        ? node.properties.className
+        : [];
+      const languageMath = classes.includes("language-math");
+      const mathDisplay = classes.includes("math-display");
+      const mathInline = classes.includes("math-inline");
+      if (languageMath || mathDisplay || mathInline) {
+        return;
+      }
+
+      const match = node.children[0]?.value?.match(inlineShikiRegex);
+      if (match) {
+        const [, code, lang] = match;
+        const hast = highlighter.codeToHast(code, { ...options, lang });
+        const inlineCode = hast.children[0].children[0];
+        if (!inlineCode) return;
+        parent?.children.splice(index ?? 0, 1, inlineCode);
+      } else {
+        if (!node.children[0] || node.children[0].type !== "text") return;
+        const code = node.children[0].value;
+        const hast = highlighter.codeToHast(code, {
+          ...options,
+          lang: "Cairo",
         });
-    };
+        const inlineCode = hast.children[0].children[0];
+        if (!inlineCode) return;
+        parent?.children.splice(index ?? 0, 1, inlineCode);
+      }
+    });
+  };
 };
 //# sourceMappingURL=inline-shiki.js.map
